[{"content":"\n创建一个新的Hugo页面类型 想了想还是单开一偏文章记录一下这部分内容，毕竟读完再写完这部分内容后，个人感觉对于hugo的一些修改已经做到了入门。\nwarning 个人前端能力有限，部分代码为ai生成。\n归档样式调整 对于归档，我期望是仅按照时间线保留我的文章，因此需要对归档的整体页面进行大改造。\n首先我们找到归档的菜单配置content/page/archives/index.md，可以看到归档的layout模板是layout: \u0026quot;archives\u0026quot;。通过进一步查询，可以找到归档页面的模板在layouts/_default/archives.html这个目录下。\nnote 归档这个模板是主题已经提供的，我们可以在根目录新建同名文件来覆盖掉主题的配置，也可以在主题内找到同名文件进行修改。\n既然我们要写一个新的归档页面，那么就需要了解原本的归档页面是怎么实现的。首先来简单的阅读一下archives这个模板：archives.html，对于内容不感兴趣的可以直接跳过。\n补充一些基本的语法 由于Hugo是使用Go语言编写的，因此除了正常的html之外，Hugo提供了一些来自于Go语言的语法规则，比如在Hugo的html文件中随处可见的{{}}语法。Hugo使用的 {{}} 语法来自Go语言的 text/template 和 html/template 包，这是Go标准库提供的模板系统。\n数据访问 1 2 3 4 {{ .Title }} \u0026lt;!-- 当前页面标题 --\u0026gt; {{ .Site.Title }} \u0026lt;!-- 网站标题 --\u0026gt; {{ .Params.author }} \u0026lt;!-- 页面参数中的作者 --\u0026gt; {{ $.Site.BaseURL }} \u0026lt;!-- 根上下文的网站基础URL --\u0026gt; 变量操作 1 2 3 4 5 6 7 \u0026lt;!-- 变量定义 --\u0026gt; {{ $title := .Title }} {{ $posts := .Site.RegularPages }} \u0026lt;!-- 变量使用 --\u0026gt; \u0026lt;h1\u0026gt;{{ $title }}\u0026lt;/h1\u0026gt; \u0026lt;p\u0026gt;共有 {{ len $posts }} 篇文章\u0026lt;/p\u0026gt; 条件控制 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 \u0026lt;!-- 基本条件 --\u0026gt; {{ if .Params.featured }} \u0026lt;span class=\u0026#34;badge\u0026#34;\u0026gt;精选\u0026lt;/span\u0026gt; {{ end }} \u0026lt;!-- 条件分支 --\u0026gt; {{ if eq .Type \u0026#34;post\u0026#34; }} \u0026lt;article\u0026gt;文章内容\u0026lt;/article\u0026gt; {{ else if eq .Type \u0026#34;page\u0026#34; }} \u0026lt;div\u0026gt;页面内容\u0026lt;/div\u0026gt; {{ else }} \u0026lt;div\u0026gt;其他内容\u0026lt;/div\u0026gt; {{ end }} \u0026lt;!-- 条件判断函数 --\u0026gt; {{ if and .Params.date (not .Params.hidden) }} 显示日期 {{ end }} 循环控制 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 \u0026lt;!-- 基本循环 --\u0026gt; {{ range .Pages }} \u0026lt;h2\u0026gt;{{ .Title }}\u0026lt;/h2\u0026gt; {{ end }} \u0026lt;!-- 带索引的循环 --\u0026gt; {{ range $index, $page := .Pages }} \u0026lt;div class=\u0026#34;item-{{ $index }}\u0026#34;\u0026gt;{{ $page.Title }}\u0026lt;/div\u0026gt; {{ end }} \u0026lt;!-- 带键值的循环 --\u0026gt; {{ range $key, $value := .Params.tags }} \u0026lt;span class=\u0026#34;tag-{{ $key }}\u0026#34;\u0026gt;{{ $value }}\u0026lt;/span\u0026gt; {{ end }} \u0026lt;!-- 空值处理 --\u0026gt; {{ range .Pages }} \u0026lt;p\u0026gt;{{ .Title }}\u0026lt;/p\u0026gt; {{ else }} \u0026lt;p\u0026gt;暂无内容\u0026lt;/p\u0026gt; {{ end }} 函数调用 函数创建这里就先跳过，简单的修改暂时用不到创建，只要能看懂代码就足够了。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 \u0026lt;!-- 内置函数 --\u0026gt; {{ len .Pages }} \u0026lt;!-- 获取长度 --\u0026gt; {{ add 1 2 }} \u0026lt;!-- 数学运算 --\u0026gt; {{ printf \u0026#34;Hello %s\u0026#34; .Title }} \u0026lt;!-- 格式化字符串 --\u0026gt; {{ now.Format \u0026#34;2006-01-02\u0026#34; }} \u0026lt;!-- 日期格式化 --\u0026gt; \u0026lt;!-- 字符串处理 --\u0026gt; {{ upper .Title }} \u0026lt;!-- 转大写 --\u0026gt; {{ lower .Title }} \u0026lt;!-- 转小写 --\u0026gt; {{ replace .Title \u0026#34; \u0026#34; \u0026#34;-\u0026#34; }} \u0026lt;!-- 字符串替换 --\u0026gt; {{ truncate 100 .Summary }} \u0026lt;!-- 截断文本 --\u0026gt; \u0026lt;!-- 集合操作 --\u0026gt; {{ where .Pages \u0026#34;Type\u0026#34; \u0026#34;post\u0026#34; }} \u0026lt;!-- 过滤 --\u0026gt; {{ first 5 .Pages }} \u0026lt;!-- 取前5个 --\u0026gt; {{ sort .Pages \u0026#34;Date\u0026#34; \u0026#34;desc\u0026#34; }} \u0026lt;!-- 排序 --\u0026gt; 管道操作 1 2 3 4 \u0026lt;!-- 链式操作 --\u0026gt; {{ .Title | upper | printf \u0026#34;标题：%s\u0026#34; }} {{ .Pages | where \u0026#34;Type\u0026#34; \u0026#34;post\u0026#34; | first 3 }} {{ .Date | dateFormat \u0026#34;2006年01月02日\u0026#34; }} 特殊符号说明 空白控制 {{-： 去除左侧空白 -}}： 去除右侧空白 {{- .Title -}} ：去除两侧空白 上下文访问 . ：当前上下文 $. ： 根上下文（页面级别） .Site ： 网站级别数据 .Params ： 页面参数 常用内置变量 页面级别 .Title ： 页面标题 .Content ： 页面内容 .Date ： 页面日期 .Params ： 前置参数 网站级别 .Site.Title：- 网站标题 .Site.Pages ：所有页面 .Site.RegularPages：常规页面 .Site.Params ： 网站配置参数 解读archives.html 1 {{ define \u0026#34;body-class\u0026#34; }}template-archives{{ end }} 这行代码为页面的body元素添加了CSS类名 template-archives ，用于归档页面的特定样式。\n1 {{ define \u0026#34;main\u0026#34; }} 这里定义了主要内容区域的模板块，我们的内容也都是在这个区域中修改和展示的。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 \u0026lt;header\u0026gt; {{- $taxonomy := $.Site.GetPage \u0026#34;taxonomyTerm\u0026#34; \u0026#34;categories\u0026#34; -}} {{- $terms := $taxonomy.Pages -}} {{ if $terms }} \u0026lt;h2 class=\u0026#34;section-title\u0026#34;\u0026gt;{{ $taxonomy.Title }}\u0026lt;/h2\u0026gt; \u0026lt;div class=\u0026#34;subsection-list\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;article-list--tile\u0026#34;\u0026gt; {{ range $terms }} {{ partial \u0026#34;article-list/tile\u0026#34; (dict \u0026#34;context\u0026#34; . \u0026#34;size\u0026#34; \u0026#34;250x150\u0026#34; \u0026#34;Type\u0026#34; \u0026#34;taxonomy\u0026#34;) }} {{ end }} \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; {{ end }} \u0026lt;/header\u0026gt; 定义了一个变量$taxonomy，它的值是该站点叫作categories的taxonomyTerm页面。之后定义了另一个变量$term，值是这个categories下所有的页面。\n实际上我们可以简单的把taxonomyTerm和term理解成上下两个层级的文件目录，下面展示的这个目录结构就可以很简单的看出taxonomyTerm和term是一个什么样的关系。\n1 2 3 4 5 网站根目录 └── categories/ (taxonomyTerm页面) ├── hugo/ (term页面) ├── hexo/ (term页面) └── 前端/ (term页面) 我们也可以在生成的public的目录下直观的看到页面的实际结构：\n后面的内容就很简单了，如果term存在，就遍历它并展示在页面中。\n1 2 3 {{ $pages := where .Site.RegularPages \u0026#34;Type\u0026#34; \u0026#34;in\u0026#34; .Site.Params.mainSections }} {{ $notHidden := where .Site.RegularPages \u0026#34;Params.hidden\u0026#34; \u0026#34;!=\u0026#34; true }} {{ $filtered := ($pages | intersect $notHidden) }} 有了前面了解categories的基础，这里定义的三个变量就很好读懂了。\n$pages是从所有常规页面中，筛选出类型是主要栏目配置的页面，也就是我们写的那些能够在首页展示的博客文章。\n$notHidden则是从所有页面中筛选出所有被隐藏的博客文章页面。\n最后$filtered是取了上述两个变量的交集，也就是所有没有被隐藏的博客文章。\n1 2 3 4 5 6 7 8 9 10 11 {{ range $filtered.GroupByDate \u0026#34;2006\u0026#34; }} {{ $id := lower (replace .Key \u0026#34; \u0026#34; \u0026#34;-\u0026#34;) }} \u0026lt;div class=\u0026#34;archives-group\u0026#34; id=\u0026#34;{{ $id }}\u0026#34;\u0026gt; \u0026lt;h2 class=\u0026#34;archives-date section-title\u0026#34;\u0026gt;\u0026lt;a href=\u0026#34;{{ $.RelPermalink }}#{{ $id }}\u0026#34;\u0026gt;{{ .Key }}\u0026lt;/a\u0026gt;\u0026lt;/h2\u0026gt; \u0026lt;div class=\u0026#34;article-list--compact\u0026#34;\u0026gt; {{ range .Pages }} {{ partial \u0026#34;article-list/compact\u0026#34; . }} {{ end }} \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; {{ end }} 这部分内容是一个循环，它会遍历所有能看到的博客文章页面的年份分组。其中GroupByDate \u0026quot;2006\u0026quot;的含义是按照年份分组，并且这个2006不能修改！！\nimportant Hugo使用Go语言的时间格式系统，它基于一个 固定的参考时间 ：Mon Jan 2 15:04:05 MST 2006\n这个参考时间的各个部分都有特定含义：\n2006 = 年份 01 = 月份 02 = 日期 15 = 小时（24小时制） 04 = 分钟 05 = 秒钟 也就是说，当我们使用2006-01-02的时候，就相当于其他语言使用 yyyy-MM-dd。\nGroupByDate会返回两个值，分别是.Key和.Pages。获取了我们需要的时间之后，就可以配置页面的锚点id了，也就是$id。对id赋值的这行代码就是将.Key的值做规范化处理，将空格替换成成短横杠，并全部设置为小写。需要这么做的原因依然时候go的时间格式问题，比如按照Jan 2026这样的月份分组格式，就会产生空格。\n后续会创建已有年份的div容器，并将各个年份的文章配置成链接并放置到相应的年份容器中。\n年份容器的id就是前面获取的$id，并且对这些容器创建用于跳转的锚点链接 \u0026lt;a href=\u0026quot;{{ $.RelPermalink }}#{{ $id }}\u0026quot;\u0026gt;{{ .Key }}\u0026lt;/a\u0026gt;。\nnote $.RelPermalink指当前页面的相对永久链接，#{{ $id }}`指锚点片段。\n最后，循环当前年份的.Pages也就是当前年份的所有博客页面。以article-list/compact这个模板渲染出当前博客的文章列表。\n1 {{ partialCached \u0026#34;footer/footer\u0026#34; . }} 在页面的最后，使用缓存的footer/footer模板作为页脚。\n修改archives.html 将tag和分类都移到分类页中 关于页面编辑和热力图等 致谢 让 Hugo 支持 GitHub 风格的块引用 Alerts\n【Hugo】Stack主题自定义修改\n『Hugo』Hugo Styles\n","date":"2025-09-14T00:00:00Z","permalink":"https://syriii.github.io/p/create_template_hugo_blog/","title":"创建一个新的Hugo页面类型"},{"content":"\n自定义你的Hugo页面 虽然已经使用了主题，但是页面上很多内容并非想要的，记录一些页面内容修改的步骤，大部分内容为前端的js和css的修改。里面会汇总一些搜罗到的我比较喜欢的改动和一些我自己额外的改动。\nwarning 个人前端能力有限，部分代码为ai生成。\n自定义菜单 图标菜单更改 在根目录下的hugo.yaml中配置menu即可，图标文件存放在目录assets/icons下。\n1 2 3 4 5 6 7 8 9 menu: main: - identifier: home # 菜单id name: Home\t# 菜单显示的文本 url: /\t# 菜单链接 weight: -100\t# 菜单权重，数值越低优先级越高 params: icon: home\t# 指定的svg图标 newTab: true\t# 在新标签页打开这个菜单 页面菜单更改 对于页面菜单，直接将配置信息添加到菜单页面的前文中。\n1 2 3 4 5 6 menu: main: name: title (optional) # 菜单名称，如果不填则直接使用页面的title weight: -90\t# 菜单权重，数值越低优先级越高 params: icon: icon-name\t# 指定的svg图标 头像更改 把头像文件放在assets/img下，在hugo.ymal里修改配置。注意此处的头像文件路径是assets目录下的相对路径。\n1 2 3 4 5 6 7 sidebar: # emoji: 🍥 subtitle: subtitle and description avatar: enabled: true local: true src: img/avatar.png 网站标签页图标 标签页的图标存放在static目录下，也就是实际文件为static/favicon.ico，此处的配置与其他地方不同。主题提供的默认配置会有注释提醒；另外，图片路径中/是必填的。\n1 favicon: /favicon.png 添加Markdown引用标签的支持 对于原生的Hugo和Stack，他们并不支持markdown的引用标签。但是github风格的引用标签被广泛应用在各种markdown文本中，包括Note, Tip, Important, Warning, Caution。因此，我需要添加相应的引用标签支持，添加相应的html和css代码。\n基本原理 添加块引用（Blockquotes）标记的 Hooks，可以自定义渲染内容。在 Hugo 中，标记（Markups）的 Hook 模板以 render- 开头，后接标记的名称，如 render-blockquote.html 就是块引用的自定义渲染模板。\n模板文件要放在 layouts/_default/_markup 目录中。当 Hugo 渲染 Markdown 的特定标记时，就会调用我们自己的模板，所以它们被称作 Hooks。\n如果你只想单独渲染有 Alerts 的块引用，就创建 render-blockquote-alert.html 模板。这时候普通的块引用就和你的 Hooks 无关了。如果你想兼容 GitHub 的风格，我建议这样做，因为 GitHub 的两种块引用风格完全不同。\n― 来源, 让 Hugo 支持 GitHub 风格的块引用 Alerts 操作步骤 创建 layouts/_default/_markup/render-blockquote-alert.html 文件，内容如下： 1 2 3 4 5 \u0026lt;blockquote class=\u0026#34;alert alert-{{ .AlertType }}\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;alert-prefix\u0026#34;\u0026gt;\u0026lt;i class=\u0026#34;ri-alert-prefix-icon\u0026#34;\u0026gt;\u0026lt;/i\u0026gt;{{ .AlertType }}\u0026lt;/div\u0026gt; {{ .Text | safeHTML -}} \u0026lt;/blockquote\u0026gt; \u0026lt;link href=\u0026#34;https://cdn.jsdelivr.net/npm/remixicon@3.5.0/fonts/remixicon.css\u0026#34; rel=\u0026#34;stylesheet\u0026#34;\u0026gt; 这里使用remix icon作为标签图标。\n创建assets/scss/custom.scss文件，内容如下： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 [data-scheme=\u0026#34;light\u0026#34;] { .alert-note { --card-separator-color: #4d7eda; --blockquote-background-color: #edf2fa; } .alert-tip { --card-separator-color: #428646; --blockquote-background-color: #edf4ee; } .alert-important { --card-separator-color: #8f6cdd; --blockquote-background-color: #f4f0fa; } .alert-warning { --card-separator-color: #936921; --blockquote-background-color: #f4f1eb; } .alert-caution { --card-separator-color: #be3536; --blockquote-background-color: #faeced; } } [data-scheme=\u0026#34;dark\u0026#34;] { .alert-note { --card-separator-color: #4d7eda; --blockquote-background-color: #1a2133; } .alert-tip { --card-separator-color: #428646; --blockquote-background-color: #1a2320; } .alert-important { --card-separator-color: #8f6cdd; --blockquote-background-color: #201a26; } .alert-warning { --card-separator-color: #d4a149; --blockquote-background-color: #262016; } .alert-caution { --card-separator-color: #be3536; --blockquote-background-color: #2d1a1a; } } .alert { position: relative; .alert-prefix { text-transform: capitalize; margin-bottom: 0.5rem; color: var(--card-separator-color); display: flex; align-items: center; gap: 0.5rem; line-height: 1; i { margin-right: 1rem; font-size: 1.5rem; line-height: 1; display: flex; align-items: center; } } \u0026amp;.alert-note .alert-prefix i::before { content: \u0026#34;\\f19b\u0026#34;; } \u0026amp;.alert-tip .alert-prefix i::before { content: \u0026#34;\\eea9\u0026#34;; } \u0026amp;.alert-important .alert-prefix i::before { content: \u0026#34;\\ed19\u0026#34;; } \u0026amp;.alert-warning .alert-prefix i::before { content: \u0026#34;\\ea21\u0026#34;; } \u0026amp;.alert-caution .alert-prefix i::before { content: \u0026#34;\\eca1\u0026#34;; } } 实际效果 note 这是Note\ntip 这是Tip\nimportant 这是Important\nwarning 这是Warning\ncaution 这是Caution\n过长的代码块展开收起支持 首先要找一张用来展示或者收起的箭头图标，放置在assets/icons目录下。 向这个layouts/partials/footer/custom.html文件添加如下代码，如果不存在则创建这个文件。 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 {{ $icon := resources.Get \u0026#34;/icons/icon-arrowwhite.png\u0026#34; }} {{ if $icon }} {{ $icon = $icon.Resize \u0026#34;22x\u0026#34; }} \u0026lt;script\u0026gt; const arrowIconBase64 = \u0026#34;{{ $icon.Content | base64Encode }}\u0026#34;; // 创建按钮模板 const createButton = (className, isCollapse = false) =\u0026gt; { const template = ` \u0026lt;div class=\u0026#34;${className}\u0026#34;\u0026gt; \u0026lt;span class=\u0026#34;${isCollapse ? \u0026#39;collapse-btn-inner\u0026#39; : \u0026#39;code-more-btn\u0026#39;}\u0026#34;\u0026gt; \u0026lt;img class=\u0026#34;${isCollapse ? \u0026#39;code-collapse-img\u0026#39; : \u0026#39;code-more-img\u0026#39;}\u0026#34; src=\u0026#34;data:image/png;base64,${arrowIconBase64}\u0026#34; alt=\u0026#34;${isCollapse ? \u0026#39;收起\u0026#39; : \u0026#39;展开\u0026#39;}\u0026#34; \u0026gt; \u0026lt;/span\u0026gt; \u0026lt;/div\u0026gt; `; const div = document.createElement(\u0026#39;div\u0026#39;); div.innerHTML = template.trim(); return div.firstElementChild; }; // 处理滚动 const scrollToBlock = (element, offset = 100) =\u0026gt; { const rect = element.getBoundingClientRect(); const scrollTop = window.pageYOffset + rect.top - offset; window.scrollTo({ top: scrollTop, behavior: \u0026#39;smooth\u0026#39; }); }; // 初始化代码块展开/收起功能 function initCodeMoreBox() { try { const codeBlocks = document.querySelectorAll(\u0026#34;.highlight\u0026#34;); if (!codeBlocks?.length) { console.log(\u0026#39;No code blocks found\u0026#39;); return; } codeBlocks.forEach(codeBlock =\u0026gt; { // 检查是否需要展开/收起功能 if (codeBlock.scrollHeight \u0026lt;= codeBlock.clientHeight) { return; } // 创建按钮 const expandBox = createButton(\u0026#39;code-more-box\u0026#39;); const collapseBox = createButton(\u0026#39;code-collapse-btn\u0026#39;, true); // 展开按钮点击事件 expandBox.querySelector(\u0026#39;.code-more-btn\u0026#39;).addEventListener(\u0026#39;click\u0026#39;, () =\u0026gt; { codeBlock.classList.add(\u0026#39;code-show\u0026#39;); expandBox.style.display = \u0026#39;none\u0026#39;; window.dispatchEvent(new Event(\u0026#39;resize\u0026#39;)); }); // 收起按钮点击事件 collapseBox.querySelector(\u0026#39;.collapse-btn-inner\u0026#39;).addEventListener(\u0026#39;click\u0026#39;, () =\u0026gt; { codeBlock.classList.remove(\u0026#39;code-show\u0026#39;); expandBox.style.display = \u0026#39;block\u0026#39;; // 使用 requestAnimationFrame 确保DOM更新后再滚动 requestAnimationFrame(() =\u0026gt; scrollToBlock(codeBlock)); window.dispatchEvent(new Event(\u0026#39;resize\u0026#39;)); }); // 添加按钮到代码块 codeBlock.appendChild(expandBox); codeBlock.appendChild(collapseBox); }); } catch (error) { console.error(\u0026#39;Error initializing code more box:\u0026#39;, error); } } // 页面加载完成后初始化 document.addEventListener(\u0026#39;DOMContentLoaded\u0026#39;, initCodeMoreBox); \u0026lt;/script\u0026gt; {{ end }} 添加css样式，文件是assets/scss/custom.scss，内容如下： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 .highlight { position: relative; max-height: 400px; overflow: hidden; \u0026amp;.code-show { max-height: none !important; .code-collapse-btn { display: block; } } } .code-more-box { position: absolute; left: 0; right: 0; bottom: 0; z-index: 1; width: 100%; padding-top: 78px; [data-scheme=\u0026#34;light\u0026#34;] \u0026amp; { background-image: linear-gradient(to bottom, rgba(255, 255, 255, 0), #fff); } [data-scheme=\u0026#34;dark\u0026#34;] \u0026amp; { background-image: linear-gradient(to bottom, rgba(29, 31, 33, 0), #1d1f21); } } .code-more-btn, .collapse-btn-inner { display: block; margin: auto; width: 44px; height: 22px; cursor: pointer; [data-scheme=\u0026#34;light\u0026#34;] \u0026amp; { background: #f0f0f5; } [data-scheme=\u0026#34;dark\u0026#34;] \u0026amp; { background: #2d2d2d; } } .code-more-btn { border-top-left-radius: 8px; border-top-right-radius: 8px; padding-top: 6px; } .code-more-img, .code-collapse-img { display: block; margin: auto; width: 22px; height: 16px; cursor: pointer !important; } .code-collapse-img { transform: rotate(180deg); } .code-collapse-btn { display: none; position: absolute; bottom: 0; left: 0; right: 0; width: 100%; height: 40px; margin-bottom: 0; background: none; z-index: 2; \u0026amp;::before { content: \u0026#39;\u0026#39;; position: absolute; bottom: 0; left: 0; right: 0; height: 40px; z-index: -1; [data-scheme=\u0026#34;light\u0026#34;] \u0026amp; { background-image: linear-gradient(to top, rgba(255, 255, 255, 1) 20%, rgba(255, 255, 255, 0)); } [data-scheme=\u0026#34;dark\u0026#34;] \u0026amp; { background-image: linear-gradient(to top, rgba(29, 31, 33, 1) 20%, rgba(29, 31, 33, 0)); } } } .collapse-btn-inner { position: relative; border-radius: 8px; padding-bottom: 6px; z-index: 3; } 添加文章更新时间支持 修改根目录下的hugo配置文件hugo.yaml，增加读取git时间选项： 1 2 3 4 5 6 frontmatter: lastmod: - :git - :fileModTime enableGitInfo: true 打开github action的配置文件.github/workflows/{github action的配置文件名称}.yaml，在运行hugo -D命令的step前加入以下配置： note 经过我自己的测试，该步骤并不会影响文章更新时间的显示，不添加也没有关系。\n但是查找的教程中有该步骤，我在这里也保留了，该步骤的里面配置项的含义也已经补充。\n1 2 3 4 5 6 - name: Git Configuration run: | git config --global core.quotePath false git config --global core.autocrlf false git config --global core.safecrlf true git config --global core.ignorecase false git config --global core.quotePath false：禁用路径引用，确保包含非ASCII字符的文件名（如中文文件名）在Git输出中正常显示，而不是被转义为八进制序列\ngit config --global core.autocrlf false：禁用自动换行符转换，保持文件的原始换行符格式，避免在不同操作系统间切换时出现换行符问题\ngit config --global core.safecrlf true：启用安全换行符检查，当检测到可能的换行符问题时会发出警告，帮助避免换行符相关的问题\ngit config --global core.ignorecase false ：禁用大小写忽略，确保Git能够正确处理文件名的大小写差异，这在大小写敏感的文件系统中特别重要\n经过以上步骤，stack已经会在文章末尾显示文章的更新时间里。不过如果我希望把更新时间放在页面标题下方，就需要在layouts/partials/article/components/details.html中添加如下代码。 warning 该html文件包含了stack主题的其他内容。如果在根目录下编辑这个文件，请将主题目录下的同名文件复制到根目录后，再进行编辑。\n1 2 3 4 5 6 7 8 9 {{ $showLastmod := ne .Lastmod .Date }} {{ if $showLastmod }} \u0026lt;div\u0026gt; {{ partial \u0026#34;helper/icon\u0026#34; \u0026#34;edit\u0026#34; }} \u0026lt;time class=\u0026#34;article-time--lastmod\u0026#34;\u0026gt; 最后更新 {{ .Lastmod | time.Format \u0026#34;2006-01-02\u0026#34; }} \u0026lt;/time\u0026gt; \u0026lt;/div\u0026gt; {{ end }} 添加回到顶部的按钮 在layouts/partials/footer/custom.html文件中添加新的js代码： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 \u0026lt;script\u0026gt; // 返回顶部功能 const backToTop = () =\u0026gt; { document.documentElement.scrollIntoView({ behavior: \u0026#39;smooth\u0026#39; }); }; // 初始化返回顶部按钮 function initBackToTopBtn() { try { const backToTopBtn = document.getElementById(\u0026#39;back-to-top\u0026#39;); if (!backToTopBtn) { console.log(\u0026#39;Back to top button not found\u0026#39;); return; } // 绑定点击事件 backToTopBtn.addEventListener(\u0026#39;click\u0026#39;, (e) =\u0026gt; { e.preventDefault(); backToTop(); }); // 滚动显示/隐藏逻辑 const toggleButtonVisibility = () =\u0026gt; { const scrollTop = document.documentElement.scrollTop || document.body.scrollTop; backToTopBtn.style.display = scrollTop \u0026gt; 200 ? \u0026#39;inline\u0026#39; : \u0026#39;none\u0026#39;; }; // 初始状态检查 toggleButtonVisibility(); // 监听滚动事件 window.addEventListener(\u0026#39;scroll\u0026#39;, toggleButtonVisibility); } catch (error) { console.error(\u0026#39;Error initializing back to top button:\u0026#39;, error); } } // 页面加载完成后初始化 document.addEventListener(\u0026#39;DOMContentLoaded\u0026#39;, initBackToTopBtn); \u0026lt;/script\u0026gt; \u0026lt;a href=\u0026#34;#\u0026#34; id=\u0026#34;back-to-top\u0026#34; title=\u0026#34;返回顶部\u0026#34;\u0026gt;\u0026lt;/a\u0026gt; 在assets/scss/custom.scss文件中添加回到顶部按钮相关的样式代码： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 #back-to-top { display: none; position: fixed; bottom: 5px; right: 15px; width: 40px; height: 40px; border-radius: 50%; background-color: var(--body-background); box-shadow: var(--shadow-l2); font-size: 20px; text-align: center; line-height: 38px; cursor: pointer; transition: transform 0.3s ease, background-color 0.3s ease; \u0026amp;:before { content: \u0026#34;\u0026#34;; display: inline-block; position: relative; width: 8px; height: 8px; border-width: 0 0 2px 2px; border-color: var(--back-to-top-color); border-style: solid; transform: rotate(135deg); } \u0026amp;:hover { transform: scale(1.1); background-color: var(--accent-background); \u0026amp;:before { border-color: var(--accent-color); } } // 响应式样式 @media screen and (max-width: 768px) { bottom: 5px; right: var(--container-padding); width: 30px; height: 30px; font-size: 16px; line-height: 32px; } @media screen and (min-width: 1024px) { bottom: 10px; right: 20px; } @media screen and (min-width: 1280px) { bottom: 15px; right: 25px; } @media screen and (min-width: 1536px) { bottom: 15px; right: 25px; } } 添加加载进度条 在layouts/partials/footer/custom.html文件中添加新的js代码：\n1 2 3 4 5 6 7 8 9 10 11 12 13 \u0026lt;script src=\u0026#34;https://npm.elemecdn.com/nprogress@0.2.0/nprogress.js\u0026#34; crossorigin=\u0026#34;anonymous\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;https://npm.elemecdn.com/nprogress@0.2.0/nprogress.css\u0026#34; crossorigin=\u0026#34;anonymous\u0026#34; /\u0026gt; \u0026lt;script\u0026gt; // 配置并启动进度条 NProgress.configure({ showSpinner: false }); NProgress.start(); // 监听页面加载状态 document.addEventListener(\u0026#39;readystatechange\u0026#39;, () =\u0026gt; { if (document.readyState === \u0026#39;interactive\u0026#39;) NProgress.inc(0.8); if (document.readyState === \u0026#39;complete\u0026#39;) NProgress.done(); }); \u0026lt;/script\u0026gt; 修改「选中目标」样式 在assets/scss/custom.scss文件中添加样式：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 ::selection { background: #dae3ea; color: #34495e; } ::-moz-selection { background: #dae3ea; color: #34495e; } ::-webkit-selection { background: #dae3ea; color: #34495e; } 修改「行内代码」样式 在assets/scss/custom.scss文件中添加样式：\n1 2 3 4 5 6 :root { // 行内代码背景色 --code-background-color: #f8f8f8; // 行内代码前景色 --code-text-color: #e96900; } 在归档列表里面显示文章副标题 在assets/scss/partials/article.scss里找到.article-list--compact，在article里面添加样式： 1 2 3 4 5 6 7 8 .article-subtitle { margin-top: -5px; font-size: 1.5rem; @include respond(md) { font-size: 1.6rem; } } 再在layouts/partials/article-list/compact.html里，找到\u0026lt;h2 class=\u0026quot;article-title\u0026quot;\u0026gt;，往后面添加如下代码： 1 2 3 4 5 {{ with .Params.description }} \u0026lt;div class=\u0026#34;article-subtitle\u0026#34;\u0026gt; {{ . }} \u0026lt;/div\u0026gt; {{ end }} 友链多列显示 在assets/scss/custom.scss文件中添加样式：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 @media (min-width: 1024px) { .article-list--compact { display: grid; // 目前是两列，如需三列，则后面再加一个1fr，以此类推 grid-template-columns: 1fr 1fr 1fr; background: none; box-shadow: none; gap: 1rem; article { background: var(--card-background); border: none; box-shadow: var(--shadow-l2); margin-bottom: 8px; margin-right: 8px; border-radius: 16px; } } } 归档样式调整 这部分内容单独开了一篇文章讲解，点击这里跳转查看。\n将tag和分类都移到分类页中 关于页面编辑和热力图等 致谢 让 Hugo 支持 GitHub 风格的块引用 Alerts\n【Hugo】Stack主题自定义修改\n『Hugo』Hugo Styles\n","date":"2024-09-11T00:00:00Z","permalink":"https://syriii.github.io/p/customize_hugo_blog/","title":"自定义你的Hugo页面"},{"content":"\n新建一个Hugo博客站 Hugo是Go语言实现的博客工具，使用Markdown进行文章编辑，使用hugo基础命令就可以生成静态网页。支持主题配置，也支持js自定义。\n安装Hugo macOS 我其中一台电脑是macOS，使用官方推荐的homebrew方式来进行hugo的安装。\n1 brew install hugo windows 家用电脑是windows，因此也补充一下windows的安装方式。 前往Hugo Release，选择对应版本的下载。 解压后,使用PowerShell或cmd执行 .\\hugo 启动hugo.exe就可以启动hugo了。\n版本确认和验证： 完成后使用 hugo version 命令来验证即可。\n创建一个空的博客 在安装hugo成功后，就可以通过 hugo new site 命令来进行网站的创建了\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 hugo new site hugo-test # Congratulations! Your new Hugo site was created in D:\\code\\personal\\hugo-test. # # Just a few more steps... # # 1. Change the current directory to D:\\code\\personal\\hugo-test. # 2. Create or install a theme: # - Create a new theme with the command \u0026#34;hugo new theme \u0026lt;THEMENAME\u0026gt;\u0026#34; # - Or, install a theme from https://themes.gohugo.io/ # 3. Edit hugo.toml, setting the \u0026#34;theme\u0026#34; property to the theme name. # 4. Create new content with the command \u0026#34;hugo new content \u0026lt;SECTIONNAME\u0026gt;\\\u0026lt;FILENAME\u0026gt;.\u0026lt;FORMAT\u0026gt;\u0026#34;. # 5. Start the embedded web server with the command \u0026#34;hugo server --buildDrafts\u0026#34;. # # See documentation at https://gohugo.io/. 对于hugo的项目接口，简单解释一下各个目录的作用吧。\narchetypes：存放的default.md是生成博客文章的模板 assets：存放被hugo pipes处理的文件 content：存放展示的博客文章相关的markdown文件 data：存放hugo处理的数据 layouts：存放布局文件 static：存放静态文件 themes：存放主题 hugo.yaml/hugo.toml: 存放博客的配置文件 配置主题 前往 Hugo Themes 可以查找并下载自己喜欢的主题，hugo社区提供了可观数量的主题。选择主题后进入主题仓库，一般会有很详细的安装和配置说明。这里就简单说几种可行的安装方法。\n关联主题仓库 用户可以直接通过clone或者从github网页上下载zip包的方式直接获取hugo主题所需的代码，将主题放到themes目录下即可。\n1 git clone https://github.com/CaiJimmy/hugo-theme-stack/ themes/hugo-theme-stack 当然，已经在使用git的情况下，可以使用submodule方式来添加主题，在网页的根目录下执行git submodule命令来添加子模块。对于后续需要定制化开发的用户，建议将原主题fork到自己账户中，再使用git submodule方式添加子模块到个人项目中，方便对于代码的单独维护。\n1 git submodule add https://github.com/CaiJimmy/hugo-theme-stack/ themes/hugo-theme-stack 如果需要同步仓库的最新更改，则运行以下命令\n1 git submodule update --remote 添加Hugo模组 用户也可以通过直接向代码里添加Hugo模组的方式来配置主题。\n首先将自己的项目转化为hugo模组 1 hugo mod init hugo-test 在自己项目中配置主题，将主题作为项目依赖导入 1 2 3 4 # config.yaml module: imports: - path: github.com/CaiJimmy/hugo-theme-stack/v3 如果需要更新主题版本的时候，执行以下命令 1 2 hugo mod get -u github.com/CaiJimmy/hugo-theme-stack/v3 hugo mod tidy 上述命令是针对主题的小版本更新，如果主题发生了大版本更新，比如v3升级到v4后，那么就需要更新配置文件的path中的版本号。\n生成网页与本地部署 想要查看生成的博客的效果，执行hugo server命令就可以进行本地实时预览，由于是热部署，因此无需重复生成，任何修改都会直接体现在预览网页中。预览页面的默认地址为http://localhost:1313，部署后直接访问就可以看到。\n1 2 hugo server -D # -D 的含义是buildDrafts，也就是构建网站时，内容包括草稿 执行hugo命令的同时，还会生成一个public文件夹。这个文件夹中的内容就是用于发布在github pages上，或者其他类似功能的网站上，详细内容会在下一部分介绍。\nGithub Pages部署 Github Pages是什么？\nGithub Pages是一个静态网站托管系统，简单的理解就是它可以部署你的静态网页，并提供网页入口供用户浏览访问。\n常规部署 在 Github官网 新建一个仓库，仓库名为 [githu的用户名].githubo.io 实际上，仓库名是可以起其他方式的，但是对于个人账号的静态页面域名是固定的，是[githu的用户名].githubo.io。如果你起了一个自定义的仓库名，此时的静态页面的域名就会变成[githu的用户名].githubo.io/[仓库名]\n前往Setting -\u0026gt; Pages，并在Build and deployment中选择要部署的分支。 修改配置文件 站点目录中的hugo.yaml的baseurl要替换成自己的域名，也就是前两步使用的[githu的用户名].githubo.io\n1 baseurl: https://syriii.github.io/ 进入hugo根目录，生成静态页面 1 hugo 执行hugo后，会生成public文件夹，文件夹内的文件是hugo生成的整个静态网站。我们只需要将这个文件夹里的所有内容push到这个创建好的github仓库就即可。\n初始化仓库，上传代码 在进入public目录后，将目录关联到github远程残酷，提交修改后并推送到远程仓库中。首次上传还需要配置你的用户名、邮箱并输入密码。\n1 2 3 4 5 6 cd public git init git remote add origin [github仓库地址] # 将本地目录链接到远程服务器的代码仓库 git add . git commit -m \u0026#34;[这次提交的描述]\u0026#34; git push -u origin master 以后每次提交，只需要重复add、commit和push三步就可以更新代码仓库。\n自动部署 我们的Hugo项目涉及了三个github仓库：\n根目录对应的Hugo项目源文件仓库 主题对应的themes仓库 静态页面对应的github pages仓库 根据上文的介绍，已经能够手动推送静态文件，但是步骤相对繁琐。仍然需要进入**/public**目录，重复进行提交和推送。因此，基于Github和Github Pages，可以使用官方提供的Github Action来实现CI/CD。\n申请token 前往Setting -\u0026gt; Developer Setting -\u0026gt; Personal access tokens创建一个个人的token(classic)，并授予repo和workflow的权限。\n保存为仓库的secrets变量 在需要使用该token的仓库中，前往Setting -\u0026gt; Secrets and variables -\u0026gt; Action选择New repository secret新建一个secret变量，后续在配置文件中使用该变量就等于使用了token\n在根目录创建一个.github/workflows/[部署文件名称].yaml文件，可以参考以下配置： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 name: hugo-deploy on: push: branches: - main workflow_dispatch: # schedule: # - cron: \u0026#39;0 0 * * *\u0026#39; # every day at midnight jobs: deploy: runs-on: ubuntu-latest steps: - name: Checkout uses: actions/checkout@v4 with: submodules: true # 如果使用submodules，则需要设置为true fetch-depth: 0 - name: Setup Hugo uses: peaceiris/actions-hugo@v3 with: hugo-version: \u0026#34;latest\u0026#34; extended: true - name: Build Web run: hugo -D - name: Deploy Web uses: peaceiris/actions-gh-pages@v4 with: PERSONAL_TOKEN: ${{ secrets.PERSIONAL_SECRET_TOKEN }} EXTERNAL_REPOSITORY: Syriii/syriii.github.io PUBLISH_BRANCH: master PUBLISH_DIR: ./public commit_message: auto deploy - ${{ github.event.head_commit.message }} 配置完成后，提交代码后就会触发部署流程，自动完成静态页面部署。\n至此，已经完成了你的第一个Hugo页面博客，开始发表内容吧。\n","date":"2023-09-09T00:00:00Z","permalink":"https://syriii.github.io/p/new_hugo_blog/","title":"新建一个hugo博客站"},{"content":"\n自定义Hugo简码 Hugo支持简码(shortcode)方式，根据既定存在的规则，将markdown中特定格式的标签转化成html页面中特定的样式。关于官方的一些介绍，可以参考这两个链接：Stack提供的简码，Hugo官方文档。\nimportant 由于shortcode会被hugo\nShortcode的使用 以stack提供的为样例，如果我们想要插入一段b站视频：\n1 {\\{\u0026lt; bilibili VIDEO_ID PART_NUMBER \u0026gt;}} 致谢 ","date":"2021-09-12T00:00:00Z","permalink":"https://syriii.github.io/p/shortcode_hugo_blog/","title":"自定义Hugo简码"}]